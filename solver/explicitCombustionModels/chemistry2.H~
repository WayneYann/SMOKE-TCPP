/*-----------------------------------------------------------------------*\
|                  _       _____ __  __  ____  _  ________                |
|                 | |     / ____|  \/  |/ __ \| |/ /  ____|               |
|          ___  __| | ___| (___ | \  / | |  | | ' /| |__                  |
|         / _ \/ _` |/ __|\___ \| |\/| | |  | |  < |  __|                 |
|        |  __/ (_| | (__ ____) | |  | | |__| | . \| |____                |
|         \___|\__,_|\___|_____/|_|  |_|\____/|_|\_\______|               |
|                                                                         |
|                                                                         |
|   Authors: A. Cuoci, M.R. Malik, Z. Li, A. Parente                      |
|                                                                         |
|   Contacts: Alberto Cuoci                                               |
|   email: alberto.cuoci@polimi.it                                        |
|   Department of Chemistry, Materials and Chemical Engineering           |
|   Politecnico di Milano                                                 |
|   P.zza Leonardo da Vinci 32, 20133 Milano (Italy)                      |
|                                                                         |
|   Contacts: Mohammad Rafi Malik, Zhiyi Li, Alessandro Parente           |
|   Aero-Thermo-Mechanical Department                                     |
|   UniversitÃ© Libre de Bruxelles                                         |
|   Avenue F. D. Roosevelt 50, 1050 Bruxelles (Belgium)                   |
|                                                                         |
|-------------------------------------------------------------------------|
|                                                                         |
|   This file is part of edcSMOKE solver.                                 |
|                                                                         |
|	License                                                           |
|                                                                         |
|   Copyright(C) 2017-2014 A. Cuoci, A. Parente                           |
|   edcSMOKE is free software: you can redistribute it and/or modify      |
|   it under the terms of the GNU General Public License as published by  |
|   the Free Software Foundation, either version 3 of the License, or     |
|   (at your option) any later version.                                   |
|                                                                         |
|   edcSMOKE is distributed in the hope that it will be useful,           |
|   but WITHOUT ANY WARRANTY; without even the implied warranty of        |
|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         |
|   GNU General Public License for more details.                          |
|                                                                         |
|   You should have received a copy of the GNU General Public License     |
|   along with edcSMOKE. If not, see <http://www.gnu.org/licenses/>.      |
|                                                                         |
\*-----------------------------------------------------------------------*/
//const int n = 148635648;//mesh size (L case DNS HAWKES)
	const int n = 864*1008*576;//mesh size (H case DNS HAWKES)
	const int n0 =0;
	const int n1 =100e6;
	const int n2 =100e6;
	//scalar volume_cell = 3.375e-15;//cell volume size (L case DNS HAWKES)
	scalar volume_cell = ((1.37*0.001)/72)*((1.37*0.001)/72)*((1.37*0.001)/72);//cell volume size (H case DNS HAWKES)
	scalarField T_DNS_OF(n2,0.0);
	Info<<"T_DNS made"<<endl;
	scalarField rho_DNS_OF(n2,0.0);
		Info<<"rho_DNS made"<<endl;
	scalarField p_DNS_OF(n2,0.0);
		Info<<"p_DNS made"<<endl;
	/*scalarField Y_CO_DNS_OF(n,0.0);
	scalarField Y_CO2_DNS_OF(n,0.0);
	scalarField Y_H_DNS_OF(n,0.0);
	scalarField Y_H2_DNS_OF(n,0.0);
	scalarField Y_H2O_DNS_OF(n,0.0);
	scalarField Y_HCO_DNS_OF(n,0.0);
	scalarField Y_HO2_DNS_OF(n,0.0);
	scalarField Y_O_DNS_OF(n,0.0);
	scalarField Y_O2_DNS_OF(n,0.0);
	scalarField Y_OH_DNS_OF(n,0.0);
	scalarField Y_N2_DNS(n,0.0);*/
	
	List<List<scalar> > Y_DNS(11, List<scalar>(n2) ); 
		Info<<"Y_DNS_DNS made"<<endl;
	List<List<scalar> > R_DNS(11, List<scalar>(n2) );
		Info<<"R_DNS_DNS made"<<endl;
	scalarField T_DNS_Final(n2,0.0);
	scalarField QdotCells_DNS(n2,0.0);
	scalarField dQCells_DNS(n2,0.0);
	
	{

	//float* T_DNS=readFloatBinaryFile("/scratch/Ali/RAW_DNS_L_HAWKES_DATA_littleEndian/jet_0228/jet_T_0228_le.dat",n);
	float* T_DNS=readFloatBinaryFile("/scratch/Ali/RAW_DNS_HAWKES_DATA_littleEndian/HIGH/jet_0228/jet_T_0228_le.dat",n);
	Info<<T_DNS[10]<<endl;

	for(int celli=n0;celli<n2;celli++) T_DNS_OF[celli]=T_DNS[celli+n1];
	delete T_DNS;T_DNS=NULL;
	
	//float* rho_DNS=readFloatBinaryFile("/scratch/Ali/RAW_DNS_L_HAWKES_DATA_littleEndian/jet_0228/jet_rho_0228_le.dat",n);
	float* rho_DNS=readFloatBinaryFile("/scratch/Ali/RAW_DNS_HAWKES_DATA_littleEndian/HIGH/jet_0228/jet_rho_0228_le.dat",n);
	Info<<rho_DNS[10]<<endl;
	for(int celli=n0;celli<n2;celli++) rho_DNS_OF[celli]=rho_DNS[celli+n1];
	delete rho_DNS;rho_DNS=NULL;
	
	//float* p_DNS=readFloatBinaryFile("/scratch/Ali/RAW_DNS_L_HAWKES_DATA_littleEndian/jet_0228/jet_P_0228_le.dat",n);
	float* p_DNS=readFloatBinaryFile("/scratch/Ali/RAW_DNS_HAWKES_DATA_littleEndian/HIGH/jet_0228/jet_P_0228_le.dat",n);
	Info<<p_DNS[10]<<endl;
	for(int celli=n0;celli<n2;celli++) p_DNS_OF[celli]=p_DNS[celli+n1];
	delete p_DNS;p_DNS=NULL;
	
	//float* Y_CO2_DNS=readFloatBinaryFile("/scratch/Ali/RAW_DNS_L_HAWKES_DATA_littleEndian/jet_0228/jet_Y_CO2_0228_le.dat",n);
	float* Y_CO2_DNS=readFloatBinaryFile("/scratch/Ali/RAW_DNS_HAWKES_DATA_littleEndian/HIGH/jet_0228/jet_Y_CO2_0228_le.dat",n);
	Info<<Y_CO2_DNS[10]<<endl;
	for(int celli=n0;celli<n2;celli++) Y_DNS[8][celli]=Y_CO2_DNS[celli+n1];
	delete Y_CO2_DNS;Y_CO2_DNS=NULL; 
		
	//float* Y_CO_DNS=readFloatBinaryFile("/scratch/Ali/RAW_DNS_L_HAWKES_DATA_littleEndian/jet_0228/jet_Y_CO_0228_le.dat",n);
	float* Y_CO_DNS=readFloatBinaryFile("/scratch/Ali/RAW_DNS_HAWKES_DATA_littleEndian/HIGH/jet_0228/jet_Y_CO_0228_le.dat",n);
	Info<<Y_CO_DNS[10]<<endl;
	for(int celli=n0;celli<n2;celli++) Y_DNS[7][celli]=Y_CO_DNS[celli+n1];
	delete Y_CO_DNS;Y_CO_DNS=NULL;
		
	//float* Y_H_DNS=readFloatBinaryFile("/scratch/Ali/RAW_DNS_L_HAWKES_DATA_littleEndian/jet_0228/jet_Y_H_0228_le.dat",n);
	float* Y_H_DNS=readFloatBinaryFile("/scratch/Ali/RAW_DNS_HAWKES_DATA_littleEndian/HIGH/jet_0228/jet_Y_H_0228_le.dat",n);
	Info<<Y_H_DNS[10]<<endl;
	for(int celli=n0;celli<n2;celli++) Y_DNS[5][celli]=Y_H_DNS[celli+n1];//forAll(Y_H_DNS_OF,i) Y_H_DNS_OF[i]=Y_H_DNS[i];
	delete Y_H_DNS;Y_H_DNS=NULL;
	
	//float* Y_H2_DNS=readFloatBinaryFile("/scratch/Ali/RAW_DNS_L_HAWKES_DATA_littleEndian/jet_0228/jet_Y_H2_0228_le.dat",n);
	float* Y_H2_DNS=readFloatBinaryFile("/scratch/Ali/RAW_DNS_HAWKES_DATA_littleEndian/HIGH/jet_0228/jet_Y_H2_0228_le.dat",n);
	Info<<Y_H2_DNS[10]<<endl;
	for(int celli=n0;celli<n2;celli++) Y_DNS[0][celli]=Y_H2_DNS[celli+n1];//forAll(Y_H2_DNS_OF,i) Y_H2_DNS_OF[i]=Y_H2_DNS[i];
	delete Y_H2_DNS;Y_H2_DNS=NULL;
	
	//float* Y_H2O_DNS=readFloatBinaryFile("/scratch/Ali/RAW_DNS_L_HAWKES_DATA_littleEndian/jet_0228/jet_Y_H2O_0228_le.dat",n);
	float* Y_H2O_DNS=readFloatBinaryFile("/scratch/Ali/RAW_DNS_HAWKES_DATA_littleEndian/HIGH/jet_0228/jet_Y_H2O_0228_le.dat",n);	
	Info<<Y_H2O_DNS[10]<<endl;
	for(int celli=n0;celli<n2;celli++) Y_DNS[4][celli]=Y_H2O_DNS[celli+n1];//forAll(Y_H2O_DNS_OF,i) Y_H2O_DNS_OF[i]=Y_H2O_DNS[i];
	delete Y_H2O_DNS;Y_H2O_DNS=NULL;
	
	//float* Y_HCO_DNS=readFloatBinaryFile("/scratch/Ali/RAW_DNS_L_HAWKES_DATA_littleEndian/jet_0228/jet_Y_HCO_0228_le.dat",n);
	float* Y_HCO_DNS=readFloatBinaryFile("/scratch/Ali/RAW_DNS_HAWKES_DATA_littleEndian/HIGH/jet_0228/jet_Y_HCO_0228_le.dat",n);
	Info<<Y_HCO_DNS[10]<<endl;
	for(int celli=n0;celli<n2;celli++) Y_DNS[9][celli]=Y_HCO_DNS[celli+n1];//forAll(Y_HCO_DNS_OF,i) Y_HCO_DNS_OF[i]=Y_HCODNS[i];
	delete Y_HCO_DNS;Y_HCO_DNS=NULL;
	
	//float* Y_HO2_DNS=readFloatBinaryFile("/scratch/Ali/RAW_DNS_L_HAWKES_DATA_littleEndian/jet_0228/jet_Y_HO2_0228_le.dat",n);
	float* Y_HO2_DNS=readFloatBinaryFile("/scratch/Ali/RAW_DNS_HAWKES_DATA_littleEndian/HIGH/jet_0228/jet_Y_HO2_0228_le.dat",n);
	Info<<Y_HO2_DNS[10]<<endl;
	for(int celli=n0;celli<n2;celli++) Y_DNS[6][celli]=Y_HO2_DNS[celli+n1];//forAll(Y_HO2_DNS_OF,i) Y_HO2_DNS_OF[i]=Y_HO2_DNS[i];
	delete Y_HO2_DNS;Y_HO2_DNS=NULL;
	
	//float* Y_O_DNS=readFloatBinaryFile("/scratch/Ali/RAW_DNS_L_HAWKES_DATA_littleEndian/jet_0228/jet_Y_O_0228_le.dat",n);
	float* Y_O_DNS=readFloatBinaryFile("/scratch/Ali/RAW_DNS_HAWKES_DATA_littleEndian/HIGH/jet_0228/jet_Y_O_0228_le.dat",n);
	Info<<Y_O_DNS[10]<<endl;
	for(int celli=n0;celli<n2;celli++) Y_DNS[2][celli]=Y_O_DNS[celli+n1];//forAll(Y_O_DNS_OF,i) Y_O_DNS_OF[i]=Y_O_DNS[i];
	delete Y_O_DNS;Y_O_DNS=NULL;
	
	//float* Y_O2_DNS=readFloatBinaryFile("/scratch/Ali/RAW_DNS_L_HAWKES_DATA_littleEndian/jet_0228/jet_Y_O2_0228_le.dat",n);
	float* Y_O2_DNS=readFloatBinaryFile("/scratch/Ali/RAW_DNS_HAWKES_DATA_littleEndian/HIGH/jet_0228/jet_Y_O2_0228_le.dat",n);
	Info<<Y_O2_DNS[10]<<endl;
	for(int celli=n0;celli<n2;celli++) Y_DNS[1][celli]=Y_O2_DNS[celli+n1];//forAll(Y_O2_DNS_OF,i) Y_O2_DNS_OF[i]=Y_O2_DNS[i];
	delete Y_O2_DNS;Y_O2_DNS=NULL;
	
	//float* Y_OH_DNS=readFloatBinaryFile("/scratch/Ali/RAW_DNS_L_HAWKES_DATA_littleEndian/jet_0228/jet_Y_OH_0228_le.dat",n);
	float* Y_OH_DNS=readFloatBinaryFile("/scratch/Ali/RAW_DNS_HAWKES_DATA_littleEndian/HIGH/jet_0228/jet_Y_OH_0228_le.dat",n);	
	Info<<Y_OH_DNS[10]<<endl;
	for(int celli=n0;celli<n2;celli++) Y_DNS[3][celli]=Y_OH_DNS[celli+n1];//forAll(Y_OH_DNS_OF,i) Y_OH_DNS_OF[i]=Y_OH_DNS[i];
	delete Y_OH_DNS;Y_OH_DNS=NULL;
	

	/*for(int i=0;i<n;i++)
	{
		Y_N2_DNS[i]=1-(Y_CO_DNS[i]+Y_CO2_DNS[i]+Y_H_DNS[i]+Y_H2_DNS[i]+Y_H2O_DNS[i]+Y_HCO_DNS[i]+Y_HO2_DNS[i]+Y_O_DNS[i]+Y_O2_DNS[i]+Y_OH_DNS[i]);
	}
	for(int celli=n0;celli<n2;celli++) Y_DNS[10][celli]=Y_N2_DNS[celli+n1];//
	Info<<Y_N2_DNS[10]<<endl;*/	
	
	for(int celli=n0;celli<n2;celli++)
	{
		scalar sum=0.0;
		for(int i=0;i<10;i++)
		{
			sum+=Y_DNS[i][celli];
		}
		Y_DNS[10][celli]=1.0-sum;
	}
	

	}
	
	unsigned int counter = 0;
	const int unsigned ns = thermodynamicsMapXML->NumberOfSpecies();
	const int unsigned ne = ne_total;
			  unsigned ne_drg = 0;
	Eigen::VectorXd residuals(ne);
		Eigen::VectorXd yStar0(ne);
		Eigen::VectorXd yStarf(ne);
		Eigen::VectorXd yMin(ne);
		Eigen::VectorXd yMax(ne);
		
	for(unsigned int i=0;i<ns;i++)	yMin(i) = 0.; yMin(ns) = 200.;	//yMin(ne-2) = 0.;	yMin(ne-1) = 0.;
	for(unsigned int i=0;i<ns;i++)	yMax(i) = 1.; yMax(ns) = 5000.;	//yMax(ne-2) = 1.e16;	yMax(ne-1) = 1.e16;
		
	OpenSMOKE::OpenSMOKEVectorDouble omegaMean(ns);
		OpenSMOKE::OpenSMOKEVectorDouble omegaStar(ns);
		OpenSMOKE::OpenSMOKEVectorDouble xMean(ns);
		OpenSMOKE::OpenSMOKEVectorDouble cMean(ns);
		OpenSMOKE::OpenSMOKEVectorDouble h_species(ns);
		
	double hMean, MWMean;
	//const scalarField& pCells = p_DNS_OF;
	//const scalarField& TCells = T_DNS_OF;
	//Info<<"T cell size"<<TCells.size()<<endl;
	const double tStart = OpenSMOKE::OpenSMOKEGetCpuTime();
	Info<<"Y O2 "<<Y_DNS[ns-1][10]<<endl;
		Info<<"T  "<<T_DNS_OF[10]<<endl;
	for(int celli=n0;celli<n2;celli++)
	{
		const double t0 = 0.;
		double tf = 2e-09;//Ali 0.;	
		for(unsigned int i=0;i<ns;i++)
				omegaMean[i+1] = Y_DNS[i][celli];
		// Convert to mole fractions
		thermodynamicsMapXML->MoleFractions_From_MassFractions(xMean.GetHandle(), MWMean, omegaMean.GetHandle());
		
		//tf = (1.-gammaStar[celli])/max(mDotStar[celli], SMALL);

		for(unsigned int i=0;i<ns;i++)
			yStar0(i) = omegaMean[i+1];
		yStar0(ns) = T_DNS_OF[celli];//yStar0(ns) = TCells[celli];
		yStar0(ns+1) = 0.;//tf;
		yStar0(ns+2) = 0.;
		fine_structure_ode_pfr.Set(p_DNS_OF[celli]);//fine_structure_ode_pfr.Set(pCells[celli]);
		// Solve the ODE system
		{
			const double tStart = OpenSMOKE::OpenSMOKEGetCpuTime();

			#include "solvePFR_DI.H"
		}
			//for(unsigned int i=0;i<ns;i++)
				//YStar_[i].internalField()[celli] = yStarf(i);
			T_DNS_Final[celli]= yStarf(ns);//TStar_[0].internalField()[celli] = yStarf(ne-3);
			for(unsigned int i=0;i<ns;i++)
				R_DNS[i][celli] = (yStarf(i)-yStar0(i))/tf;
			
			thermodynamicsMapXML->SetTemperature(T_DNS_OF[celli]);//thermodynamicsMapXML->SetTemperature(TCells[celli]);
			thermodynamicsMapXML->SetPressure(p_DNS_OF[celli]);//thermodynamicsMapXML->SetPressure(pCells[celli]);
			thermodynamicsMapXML->hMolar_Species(h_species.GetHandle());

			double HeatRelease = 0.;
			for(unsigned int i=0;i<ns;i++)
				HeatRelease += -h_species[i+1]/thermodynamicsMapXML->MW(i) * R_DNS[i][celli];
			QdotCells_DNS[celli] = HeatRelease;
			dQCells_DNS[celli] = HeatRelease * volume_cell;	
			if (counter%(int(0.001*n2)+1) == 0)
			{
				
					Info << "   Accomplished: " << counter << "/" << n2<< endl;

			}
			counter++;
	}
	//Info<<"Y O2 10"<<Y_DNS[1][10]<<endl;
	
	//for H case
	writedoubleBinaryFile("/scratch/Ali/Filtered_RAW_DNS_HAWKES_DATA_littleEndian/HIGH/jet_0228/jet_T_0228_le_out2.dat",n2,T_DNS_Final);
	scalarField tmp_R_i_DNS(n2,0.0);
	for(int celli=n0;celli<n2;celli++) tmp_R_i_DNS[celli]=R_DNS[0][celli];
	writedoubleBinaryFile("/scratch/Ali/Filtered_RAW_DNS_HAWKES_DATA_littleEndian/HIGH/jet_0228/jet_RR_COH2_0228_le_out2.dat",n2,tmp_R_i_DNS);
	for(int celli=n0;celli<n2;celli++) tmp_R_i_DNS[celli]=R_DNS[1][celli];
	writedoubleBinaryFile("/scratch/Ali/Filtered_RAW_DNS_HAWKES_DATA_littleEndian/HIGH/jet_0228/jet_RR_COO2_0228_le_out2.dat",n2,tmp_R_i_DNS);
	for(int celli=n0;celli<n2;celli++) tmp_R_i_DNS[celli]=R_DNS[2][celli];
	writedoubleBinaryFile("/scratch/Ali/Filtered_RAW_DNS_HAWKES_DATA_littleEndian/HIGH/jet_0228/jet_RR_COO_0228_le_out2.dat",n2,tmp_R_i_DNS);
	for(int celli=n0;celli<n2;celli++) tmp_R_i_DNS[celli]=R_DNS[3][celli];
	writedoubleBinaryFile("/scratch/Ali/Filtered_RAW_DNS_HAWKES_DATA_littleEndian/HIGH/jet_0228/jet_RR_COOH_0228_le_out2.dat",n2,tmp_R_i_DNS);
	for(int celli=n0;celli<n2;celli++) tmp_R_i_DNS[celli]=R_DNS[4][celli];
	writedoubleBinaryFile("/scratch/Ali/Filtered_RAW_DNS_HAWKES_DATA_littleEndian/HIGH/jet_0228/jet_RR_COH2O_0228_le_out2.dat",n2,tmp_R_i_DNS);
	for(int celli=n0;celli<n2;celli++) tmp_R_i_DNS[celli]=R_DNS[5][celli];
	writedoubleBinaryFile("/scratch/Ali/Filtered_RAW_DNS_HAWKES_DATA_littleEndian/HIGH/jet_0228/jet_RR_COH_0228_le_out2.dat",n2,tmp_R_i_DNS);
	for(int celli=n0;celli<n2;celli++) tmp_R_i_DNS[celli]=R_DNS[6][celli];
	writedoubleBinaryFile("/scratch/Ali/Filtered_RAW_DNS_HAWKES_DATA_littleEndian/HIGH/jet_0228/jet_RR_COHO2_0228_le_out2.dat",n2,tmp_R_i_DNS);
	for(int celli=n0;celli<n2;celli++) tmp_R_i_DNS[celli]=R_DNS[7][celli];
	writedoubleBinaryFile("/scratch/Ali/Filtered_RAW_DNS_HAWKES_DATA_littleEndian/HIGH/jet_0228/jet_RR_COCO_0228_le_out2.dat",n2,tmp_R_i_DNS);
	for(int celli=n0;celli<n2;celli++) tmp_R_i_DNS[celli]=R_DNS[8][celli];
	writedoubleBinaryFile("/scratch/Ali/Filtered_RAW_DNS_HAWKES_DATA_littleEndian/HIGH/jet_0228/jet_RR_COCO2_0228_le_out2.dat",n2,tmp_R_i_DNS);
	for(int celli=n0;celli<n2;celli++) tmp_R_i_DNS[celli]=R_DNS[9][celli];
	writedoubleBinaryFile("/scratch/Ali/Filtered_RAW_DNS_HAWKES_DATA_littleEndian/HIGH/jet_0228/jet_RR_COHCO_0228_le_out2.dat",n2,tmp_R_i_DNS);
	for(int celli=n0;celli<n2;celli++) tmp_R_i_DNS[celli]=R_DNS[10][celli];
	writedoubleBinaryFile("/scratch/Ali/Filtered_RAW_DNS_HAWKES_DATA_littleEndian/HIGH/jet_0228/jet_RR_CON2_0228_le_out2.dat",n2,tmp_R_i_DNS);

	writedoubleBinaryFile("/scratch/Ali/Filtered_RAW_DNS_HAWKES_DATA_littleEndian/HIGH/jet_0228/jet_QdotCells_DNS_0228_le_out2.dat",n2,QdotCells_DNS);
	writedoubleBinaryFile("/scratch/Ali/Filtered_RAW_DNS_HAWKES_DATA_littleEndian/HIGH/jet_0228/jet_dQCells_DNS_0228_le_out2.dat",n2,dQCells_DNS);

	const double tEnd = OpenSMOKE::OpenSMOKEGetCpuTime();		
	Info << "CPU time for chemistry (EDC): " << tEnd - tStart << " s " << endl;				
				

	
	
//if (homogeneousReactions == true)
//{
	/*if (combustionModel == "ED" || combustionModel == "EDFR")
		#include "EDFR.H"
	else if (combustionModel == "EDC")
		#include "EDC.H"
	else if (combustionModel == "PaSR")
		#include "PaSR.H"
	else if (combustionModel == "noModel")	*/
		//#include "noModel.H"
//}
